@using InventoryManagement.Helper;
@model InventoryManagement.Models.Permissionviewmodel

@{
    ViewBag.Title = "UserPermission";
}
<style>
    .checkbox {
        padding-left: 20px;
    }

        .checkbox label {
            display: inline-block;
            position: relative;
            padding-left: 5px;
        }

            .checkbox label::before {
                content: "";
                display: inline-block;
                position: absolute;
                width: 17px;
                height: 17px;
                left: 0;
                margin-left: -20px;
                border: 1px solid #cccccc;
                border-radius: 3px;
                background-color: #fff;
                -webkit-transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
                -o-transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
                transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
            }

            .checkbox label::after {
                display: inline-block;
                position: absolute;
                width: 16px;
                height: 16px;
                left: 0;
                top: 0;
                margin-left: -20px;
                padding-left: 3px;
                padding-top: 1px;
                font-size: 11px;
                color: #555555;
            }

        .checkbox input[type="checkbox"] {
            opacity: 0;
        }

            .checkbox input[type="checkbox"]:focus + label::before {
                outline: thin dotted;
                outline: 5px auto -webkit-focus-ring-color;
                outline-offset: -2px;
            }

            .checkbox input[type="checkbox"]:checked + label::after {
                font-family: 'FontAwesome';
                content: "\f00c";
            }

            .checkbox input[type="checkbox"]:disabled + label {
                opacity: 0.65;
            }

                .checkbox input[type="checkbox"]:disabled + label::before {
                    background-color: #eeeeee;
                    cursor: not-allowed;
                }

        .checkbox.checkbox-circle label::before {
            border-radius: 50%;
        }

        .checkbox.checkbox-inline {
            margin-top: 0;
        }

    .checkbox-primary input[type="checkbox"]:checked + label::before {
        background-color: #428bca;
        border-color: #428bca;
    }

    .checkbox-primary input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-danger input[type="checkbox"]:checked + label::before {
        background-color: #d9534f;
        border-color: #d9534f;
    }

    .checkbox-danger input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-info input[type="checkbox"]:checked + label::before {
        background-color: #5bc0de;
        border-color: #5bc0de;
    }

    .checkbox-info input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-warning input[type="checkbox"]:checked + label::before {
        background-color: #f0ad4e;
        border-color: #f0ad4e;
    }

    .checkbox-warning input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-success input[type="checkbox"]:checked + label::before {
        background-color: #5cb85c;
        border-color: #5cb85c;
    }

    .checkbox-success input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .radio {
        padding-left: 20px;
    }

        .radio label {
            display: inline-block;
            position: relative;
            padding-left: 5px;
        }

            .radio label::before {
                content: "";
                display: inline-block;
                position: absolute;
                width: 17px;
                height: 17px;
                left: 0;
                margin-left: -20px;
                border: 1px solid #cccccc;
                border-radius: 50%;
                background-color: #fff;
                -webkit-transition: border 0.15s ease-in-out;
                -o-transition: border 0.15s ease-in-out;
                transition: border 0.15s ease-in-out;
            }

            .radio label::after {
                display: inline-block;
                position: absolute;
                content: " ";
                width: 11px;
                height: 11px;
                left: 3px;
                top: 3px;
                margin-left: -20px;
                border-radius: 50%;
                background-color: #555555;
                -webkit-transform: scale(0, 0);
                -ms-transform: scale(0, 0);
                -o-transform: scale(0, 0);
                transform: scale(0, 0);
                -webkit-transition: -webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33);
                -moz-transition: -moz-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33);
                -o-transition: -o-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33);
                transition: transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33);
            }

        .radio input[type="radio"] {
            opacity: 0;
        }

            .radio input[type="radio"]:focus + label::before {
                outline: thin dotted;
                outline: 5px auto -webkit-focus-ring-color;
                outline-offset: -2px;
            }

            .radio input[type="radio"]:checked + label::after {
                -webkit-transform: scale(1, 1);
                -ms-transform: scale(1, 1);
                -o-transform: scale(1, 1);
                transform: scale(1, 1);
            }

            .radio input[type="radio"]:disabled + label {
                opacity: 0.65;
            }

                .radio input[type="radio"]:disabled + label::before {
                    cursor: not-allowed;
                }

        .radio.radio-inline {
            margin-top: 0;
        }

    .radio-primary input[type="radio"] + label::after {
        background-color: #428bca;
    }

    .radio-primary input[type="radio"]:checked + label::before {
        border-color: #428bca;
    }

    .radio-primary input[type="radio"]:checked + label::after {
        background-color: #428bca;
    }

    .radio-danger input[type="radio"] + label::after {
        background-color: #d9534f;
    }

    .radio-danger input[type="radio"]:checked + label::before {
        border-color: #d9534f;
    }

    .radio-danger input[type="radio"]:checked + label::after {
        background-color: #d9534f;
    }

    .radio-info input[type="radio"] + label::after {
        background-color: #5bc0de;
    }

    .radio-info input[type="radio"]:checked + label::before {
        border-color: #5bc0de;
    }

    .radio-info input[type="radio"]:checked + label::after {
        background-color: #5bc0de;
    }

    .radio-warning input[type="radio"] + label::after {
        background-color: #f0ad4e;
    }

    .radio-warning input[type="radio"]:checked + label::before {
        border-color: #f0ad4e;
    }

    .radio-warning input[type="radio"]:checked + label::after {
        background-color: #f0ad4e;
    }

    .radio-success input[type="radio"] + label::after {
        background-color: #5cb85c;
    }

    .radio-success input[type="radio"]:checked + label::before {
        border-color: #5cb85c;
    }

    .radio-success input[type="radio"]:checked + label::after {
        background-color: #5cb85c;
    }
</style>
@using (Ajax.BeginForm("UserPermission", "Account", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "permission", OnSuccess = "Response" }))
{
    <div class="row">
        <div class="col-md-4">
            <label>Users</label>
            @Html.DropDownListFor(x => x.PermissionMaster.UserId, new SelectList(Commonhelper.GetUsers(), "Value", "Text"), "Select", new { @class = "form-control" })
            @*@Html.DropDownList("UserId", new SelectList(Commonhelper.GetUsers(), "Value", "Text"), "Select", new { @class = "form-control" })*@

        </div>

        <div class="col-md-4" style="padding:2rem;">
            <label></label><br />
            <input type="submit" class="btn btn-primary" value="Save" id="Save" name="Save" />
        </div>

    </div>



    <br />
    <div class="row">
        <div id="permission">
            @Html.Action("GetMenu")
            <br />

        </div>
    </div>



}


@section Scripts
{
    
    <script>
        function Response(res) {
            window.location.href = "./UserLevelPermission";
        }
    </script>
    <script>

        $("#IsAddall").click(function () {
            $('.addfocus').not(this).prop('checked', this.checked);
            ////$('.parent').attr('checked', this.checked);
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                $('.parent').each(function () {
                    debugger;
                    var isCheck = $(this).prop('checked');
                    $(this).prop('checked', true);

                });
            }
            else {
                $('.parent').each(function () {

                    $(this).prop('checked', false);
                    debugger;

                });
            }


        });
    </script>
    <script>

        $("#IsEditall").click(function () {
            $('.editfocus').not(this).prop('checked', this.checked);
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                $('.parent').each(function () {
                    debugger;
                    var isCheck = $(this).prop('checked');
                    $(this).prop('checked', true);

                });
            }
            else {
                $('.parent').each(function () {

                    $(this).prop('checked', false);
                    debugger;

                });
            }
        });
    </script>
    <script>

        $("#IsViewall").click(function () {
            $('.viewfocus').not(this).prop('checked', this.checked);
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                $('.parent').each(function () {
                    debugger;
                    var isCheck = $(this).prop('checked');
                    $(this).prop('checked', true);

                });
            }
            else {
                $('.parent').each(function () {

                    $(this).prop('checked', false);
                    debugger;

                });
            }
        });   

    </script>
    <script>
        $("#IsDeleteall").click(function () {
            $('.deletefocus').not(this).prop('checked', this.checked);
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                $('.parent').each(function () {
                    debugger;
                    var isCheck = $(this).prop('checked');
                    $(this).prop('checked', true);

                });
            }
            else {
                $('.parent').each(function () {

                    $(this).prop('checked', false);
                    debugger;

                });
            }
        });

    </script>
 
    <script>
        $(function () {

            // add multiple select / deselect functionality
            $(".parent").click(function () {
                
                var _class = this.className;
                var fields = _class.split('_');
                var menu = "." + fields[1];
                var parent = "._" + fields[1]
                debugger;
                var isChecked = $(parent).prop('checked');

                if ($(parent).is(":checked")) {
                    $(menu).prop('checked', true);

                }
                else {

                    $(menu).prop('checked', false);
                }
            });

            // if all checkbox are selected, check the selectall checkbox
            // and viceversa
            $(".addfocus").click(function () {

                var total = [];
                var _class = this.className;
                var fields = _class.split(" ");
                var menu = "parent " + '_' + fields[1];
                var checkctrl = '.' + fields[1] + ':checked';

                $(checkctrl).each(function () {
                    var status = $(this).val();
                    debugger;
                    if (status == "true") {


                        total.push($(this).val())
                    }


                });
                var ctrl = document.getElementsByClassName(menu);
                debugger;
                if (total.length > 0) {
                    $(ctrl).prop('checked', true);
                }
                else if (total.length == 0) {
                    $(ctrl).prop('checked', false);
                }


            });
            $(".editfocus").click(function () {
                debugger;
                var total = [];
                var _class = this.className;
                var fields = _class.split(" ");
                var menu = "parent " + '_' + fields[1];
                var checkctrl = '.' + fields[1] + ':checked';
                var isChecked = $(this).prop('checked');
                var ctrl = document.getElementsByClassName(menu);
                if (isChecked) {
                    $(ctrl).prop('checked', true);
                }
                else {

                    $('.editfocus').each(function () {
                        debugger;
                        var status = $(this).prop('checked');
                        if (status == true) {

                            total.push($(this).val())
                        }

                    });
                    if (total.length == 0) {
                        $(ctrl).prop('checked', false);
                    }
                }
                
            });


            $(".viewfocus").click(function () {

                var total = [];
                var _class = this.className;
                var fields = _class.split(" ");
                var menu = "parent " + '_' + fields[1];
                var checkctrl = '.' + fields[1] + ':checked';
                var isChecked = $(this).prop('checked');
                var ctrl = document.getElementsByClassName(menu);

                if (isChecked) {
                    $(ctrl).prop('checked', true);
                }
                else {

                    $('.viewfocus').each(function () {

                        var status = $(this).prop('checked');
                        if (status == true) {

                            total.push($(this).val())
                        }

                    });
                    if (total.length == 0) {
                        var isCheck = $(ctrl).prop('checked');
                        debugger;
                        $(ctrl).prop('checked', false)

                    }
                }






            });


            $(".deletefocus").click(function () {

                var total = [];
                var _class = this.className;
                var fields = _class.split(" ");
                var menu = "parent " + '_' + fields[1];
                var ctrl = document.getElementsByClassName(menu);
                var checkctrl = '.' + fields[1] + ':checked';
                var isChecked = $(this).prop('checked');
                if (isChecked) {
                    $(ctrl).prop('checked', true);
                }
                else {
                    $('.deletefocus').each(function () {

                        var status = $(this).prop('checked');
                        if (status == true) {

                            total.push($(this).val())
                        }

                    });
                    debugger;
                    if (total.length == 0) {
                        var isCheck = $(ctrl).prop('checked');
                        debugger;
                        $(ctrl).prop('checked', false);
                    }
                }





            });
        });
    </script>
   
}