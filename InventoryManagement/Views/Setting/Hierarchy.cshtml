@model List<InventoryManagement.Models.Treelevel>
@using InventoryManagement.Helper;
@{
    ViewBag.Title = "Hierarchy";
}

<style>
    .checkboxtree {
    }
</style>
<link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />
@using (Ajax.BeginForm("Hierarchy", "Setting", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "", OnSuccess = "Response" }))
{

    <div class="container-fluid">
        <div class="row">
          <div class="table">
              <table class="table table-bordered">
                  <tr>
                      <th>Parent</th>
                      <th>Child</th>
                      <th>Action</th>
                  </tr>
                  @foreach(var item in Model)
                  {
                  <tr>
                      <td>@item.Parent.Name</td>
                      <td>@item._subParent.Name</td>
                      <td>
                          <a href="/Setting/EditHierarchy/@item.Id" class="btn btn-default">
                              <div class="d-flex w-100 justify-content-start align-items-center">
                                  <span>Edit</span>
                              </div>
                          </a>
                      </td>
                  </tr>
                  }
              </table>
          </div>
        </div>


    </div>
}
@section scripts
{
        <script src="https://unpkg.com/gijgo@1.9.13/js/gijgo.min.js" type="text/javascript"></script>
        <link href="https://unpkg.com/gijgo@1.9.13/css/gijgo.min.css" rel="stylesheet" type="text/css" />
        @*<script type="text/javascript">
                $(document).ready(function () {
                    var tree = $('#tree').tree({
                        primaryKey: 'id',
                        uiLibrary: 'bootstrap4',
                        dataSource: '/Setting/LazyGet',
                        checkboxes: true,
                        backColor: 'green'

                    });

                    //$('input.checkbox').not(this).prop('checked', false);
                    $('#btnSave').on('click', function () {
                        var child = [];
                        var checkedIds = tree.getCheckedNodes();
                        for (var i = 0; i < checkedIds.length; i++) {
                            var Hierarchy = {
                                Id: checkedIds[i]
                            }
                            child.push(Hierarchy);
                        }
                        var Hierarchy = {
                            Childs: child,
                            ParentId: 100

                        }
                        debugger;
                        $.ajax({
                            type: "POST",
                            data: JSON.stringify(Hierarchy),
                            url: '/Setting/Hierarchy',
                            contentType: "application/json",
                            dataType: 'json',
                        }).done(function (res) {

                        });

                    });


                });
            </script>*@

        <script>
            $("#ParentId").on('change', function () {

                var tree = $('#tree').tree({
                    primaryKey: 'id',
                    uiLibrary: 'bootstrap4',
                    data: {
                        parentId: $("#ParentId").val()
                    },

                    dataSource: '/Setting/LazyGet',
                    lazyLoading: true

                });
                tree.reload({ parentId: $("#ParentId").val() });
                tree.on('select', function (e, node, id) {
                    $("#SubParentId").val(id)
                    //alert('select is fired for node with id=' + id);
                });
                $('#btnSave').on('click', function () {
                    //var child = [];
                    //debugger;
                    //var checkedIds = tree.getCheckedNodes();
                    //var data = tree.xhr;
                    //var json = JSON.parse(data.responseText);
                    //var yourData = json.Data;
                    //var checkedIds = tree.getCheckedNodes();
                    //for (var i = 0; i < checkedIds.length; i++) {
                    //    var Hierarchy = {
                    //        Id: checkedIds[i]
                    //    }
                    //    child.push(Hierarchy);
                    //}
                    //var Hierarchy = {
                    //    Childs: child,
                    //    ParentId: 100

                    //}
                });
            })
            function Response(res) {

            }
        </script>
    }