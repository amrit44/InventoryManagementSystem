@model InventoryManagement.Models.ItemMaster
@using InventoryManagement.Helper;
@{
    ViewBag.Title = "CreateItem";
}
<style>
    .field-validation-error {
        color: red;
    }
</style>

@using (Ajax.BeginForm("UpdateItem", "Master", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Response" }))
{
    <div class="fa-heading" style="font-family:fantasy;">Update Item </div>


    <div class="row">
        <div class="col-md-12">
            <div class="col-md-4">

            </div>
            <div class="col-md-4">

            </div>
            <div class="col-md-4">
                <label>

                </label>

                <input type="submit" value="Update" class="btn btn-primary" style="float:right;" />

            </div>
        </div>
    </div>
    <hr />
    <div id="ItemTemplate">
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Product code</label>
                    @Html.TextBoxFor(x => x.ProductCode, new { @class = "form-control", @readonly = true })
                    @Html.HiddenFor(x => x.Id)
                    @Html.Hidden("Previousproductcode", Model.ProductCode)
                    @Html.Hidden("Previousproductname", Model.ProductName)
                    @Html.Hidden("Previousbarcode", Model.BarCode)
                    @Html.Hidden("Previousskucode", Model.SkuCode)
                    @Html.Hidden("Previoussapcode", Model.SapCode)
                    @Html.Hidden("Previoushsncode", Model.HsnCode)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Product Name</label>
                    @Html.TextBoxFor(x => x.ProductName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.ProductName)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Description</label>
                    @Html.TextBoxFor(x => x.Description, new { @class = "form-control" })

                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Bar Code</label>
                    @Html.TextBoxFor(x => x.BarCode, new { @class = "form-control", @readonly = true })
                    @Html.ValidationMessageFor(x => x.BarCode)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Sku code</label>
                    @Html.TextBoxFor(x => x.SkuCode, new { @class = "form-control", @readonly = true })
                    @Html.ValidationMessageFor(x => x.SkuCode)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Sap Code</label>
                    @Html.TextBoxFor(x => x.SapCode, new { @class = "form-control", @readonly = true })
                    @Html.ValidationMessageFor(x => x.SapCode)
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Category</label>
                    @Html.DropDownListFor(m => m.Category, new SelectList(Commonhelper.GetCategory(), "Id", "Name", Model.Category), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Category)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Sub Category</label>
                    @Html.DropDownListFor(m => m.SubCategory, new SelectList(Commonhelper.GetSubCategoryByCategory(Model.Category), "Id", "Name", Model.SubCategory), "Select", new { @class = "form-control" })

                    @Html.ValidationMessageFor(x => x.SubCategory)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Brand</label>
                    @Html.DropDownListFor(m => m.Brand, new SelectList(Commonhelper.GetBrandMaster(), "Id", "Name", Model.Brand), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Brand)
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Size</label>
                    @Html.TextBoxFor(x => x.Size, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Size)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Quality/Style</label>
                    @Html.TextBoxFor(x => x.Quality, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Quality)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Color</label>
                    @Html.DropDownListFor(x => x.Color, new SelectList(Commonhelper.GetColor(), "Id", "Name", Model.Color), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Color)


                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Item-Order</label>
                    @Html.TextBoxFor(x => x.ItemOrder, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.ItemOrder)


                </div>
            </div>
        </div>
        <br />
        <div class="fa-heading" style="font-family:fantasy;">Price Details</div>
        <hr />
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Maximum Retail Price(Mrp)</label>
                    @Html.TextBoxFor(x => x.Mrp, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Mrp)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Selling Price</label>
                    @Html.TextBoxFor(x => x.Sellprice, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Sellprice)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Cost Price</label>
                    @Html.TextBoxFor(x => x.Costprice, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Costprice)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Gst</label>
                    @Html.TextBoxFor(x => x.Gst, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Gst)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Offer(%)</label>
                    @Html.TextBoxFor(x => x.offer, new { @class = "form-control" })
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Re-orderLevel</label>
                    @Html.TextBoxFor(x => x.Reorderlevel, new { @class = "form-control" })
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Max Quantity</label>
                    @Html.TextBoxFor(x => x.MaximumQuantity, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.MaximumQuantity)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Min Quantity</label>
                    @Html.TextBoxFor(x => x.MinimumQuantity, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.MinimumQuantity)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Box-Quantity</label>
                    @Html.TextBoxFor(x => x.BoxQuantity, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.BoxQuantity)
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Measurement Unit</label>
                    @Html.TextBoxFor(x => x.Mou, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Mou)

                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>SubMeasurement Unit</label>
                    @Html.TextBoxFor(x => x.SubMou, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.SubMou)
                </div>
                <div class="col-md-4" style="padding:1rem;">
                    <label>Unique Transaction</label>
                    <br />
                    @Html.CheckBoxFor(x => x.IsUnique)

                    @Html.ValidationMessageFor(x => x.IsUnique)
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4" style="padding:1rem;">
                    <label>Hsn-Code</label>
                    @Html.TextBoxFor(x => x.HsnCode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.SkuCode)
                </div>
            </div>
        </div>
        <br />
        @if (Model.ItemOptionalDetails.Count > 0)
        {
            <div class="fa-heading" style="font-family:fantasy;">Optional Details</div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    @Html.Partial("_OptionalFields")
                </div>
            </div>

        }

    </div>



}
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")


    <script>
        $(document).on('change','#Category', function () {

            var Category = $("#Category").val();
            var url = '@Url.Action("GetSubcategory", "Master")';

            $.ajax({
                url: url,
                method:'Get',
                data: { category: Category},
                success: function (response) {
                    $("#SubCategory").empty();
                    $("#SubCategory").append($("<option></option>").val('').html('Select'));

                    $.each(response, function (i,value) {
                        $("#SubCategory").append($("<option></option>").val(value.Id).html(value.Name));
                    })
                },
                failure: function (fail) {

                }
            })
        })
    </script>

    <script>
        function Response(res) {


            if (res.status) {
                        toastr.options = {
                            "closeButton": true,
                            "debug": false,
                            "positionClass": "toast-bottom-right",
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "300000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        };
                toastr.success(res.msg);
                window.location.href = "../Item";
                    }
                    else {
                        toastr.options = {
                            "closeButton": true,
                            "debug": false,
                            "positionClass": "toast-bottom-right",
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "300000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        };
                        toastr.error(res.msg);
                    }

           
            ///
        }
    </script>
}
